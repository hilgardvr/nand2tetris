// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // C Instruction:
    //  111a c1c2c3c4 c5c6d1d2 d3j1j2j3
    //  5432  1 0 9 8  7 6 5 4  3 2 1 0


    //A Register - load bit if A instruction or if store in A (d1)
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aRegIn); // instruction if A instruction - set to @ value
    And(a=instruction[15], b=instruction[5], out=loadCInstr);
    Not(in=instruction[15], out=loadAInstr);
    Or(a=loadAInstr, b=loadCInstr, out=loadAReg);
    ARegister(in=aRegIn, load=loadAReg, out=aRegOut);
    //send A reg content to addressM
    And16(a=aRegOut, b=aRegOut, out[0..14]=addressM, out[15]=false);


    //  A Register or Memory
    //  if a == 0
    //  load A
    //  else RAM[A]
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aluMuxIn);

    //  D Register load if d2
    And(a=instruction[15], b=instruction[4], out=dRegLoad);
    DRegister(in=aluOut, load=dRegLoad, out=aluDRegIn);

    // ALU
    ALU(x=aluDRegIn, y=aluMuxIn, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
      out=aluOut, zr=aluZr, ng=aluNg);
    And16(a=aluOut, b=aluOut, out=outM);
    And(a=instruction[15], b=instruction[3], out=writeM);    //writeM if d3
     
    //PC
    Not(in=aluZr, out=notZ);
    Not(in=aluNg, out=notN);

    // JGT j3    
    And(a=notZ, b=notN, out=greater);
    And(a=greater, b=instruction[0], out=JGT);

    // JEQ j2
    And(a=instruction[1], b=aluZr, out=JEQ);

    // JGE j2 & j3
    Or(a=JGT, b=JEQ, out=JGE);

    // JLT j1
    And(a=instruction[2], b=aluNg, out=JLT);
    
    // JNE j1 & j3
    And(a=instruction[0], b=instruction[2], out=notEq);
    And(a=notEq, b=notZ, out=JNE);

    // JLE j1 & j2
    Or(a=JEQ, b=JLT, out=JLE);
    
    // JMP j1 & j2 & j3
    And(a=instruction[0], b=instruction[1], out=jmp01);
    And(a=instruction[2], b=jmp01, out=JMP);

    // load
    Or8Way(in[0]=false, in[1]=JGT, in[2]=JEQ, in[3]=JGE, in[4]=JLT, in[5]=JNE,
      in[6]=JLE, in[7]=JMP, out=jumpOr);
    And(a=instruction[15], b=jumpOr, out=jump);

    //inc
    Not(in=jump, out=notJump);
    Not(in=reset, out=notReset);
    And(a=notJump, b=notReset, out=pcInc);
    
    PC(in=aRegOut, load=jump, inc=pcInc, reset=reset, out[0..14]=pc);
}

//Bootstrap code
@256
D=A
@SP
M=D
@300
D=A
@LCL
M=D
@400
D=A
@ARG
M=D
//Calling function Sys.init
@RETURNID_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@ARG
M=D
M=M-1
M=M-1
M=M-1
M=M-1
M=M-1
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURNID_0)
//Function Sys.init
(Sys.init)
//Pushing constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//Calling function Main.fibonacci
@RETURNID_1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@ARG
M=D
M=M-1
M=M-1
M=M-1
M=M-1
M=M-1
M=M-1
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURNID_1)
//Adding label WHILE
(WHILE)
//Juming to WHILE
@WHILE
0;JMP
//Function Main.fibonacci
(Main.fibonacci)
//Pushing from ARG 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
//Pushing constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//Less?
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
@DOLTLT0
D;JLT
@DOLTNOTLT0
D;JGE
(DOLTLT0)
@SP
A=M-1
M=-1
@DOLTCONT0
0;JMP
(DOLTNOTLT0)
@SP
A=M-1
M=0
(DOLTCONT0)
//Conditional jump to IF_TRUE
@SP
M=M-1
A=M
D=M
@IF_TRUE
D;JNE
//Juming to IF_FALSE
@IF_FALSE
0;JMP
//Adding label IF_TRUE
(IF_TRUE)
//Pushing from ARG 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
//Returning from function
//Saving return value
@LCL
D=M
@R15
M=D
@5
D=A
@R15
A=M-D
D=M
@R15
M=D
//Pushing return value to ARG
@SP
A=M-1
D=M
@ARG
A=M
M=D
//Resetting stackpointer
D=A+1
@SP
M=D
//Resetting memory after return
//Resetting THAT
@LCL
M=M-1
A=M
D=M
@THAT
M=D
//Resetting THIS
@LCL
M=M-1
A=M
D=M
@THIS
M=D
//Resetting ARG
@LCL
M=M-1
A=M
D=M
@ARG
M=D
//Resetting local
@LCL
M=M-1
A=M
D=M
@LCL
M=D
//Jumping to saved return location
@R15
A=M
0;JMP
//Adding label IF_FALSE
(IF_FALSE)
//Pushing from ARG 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
//Pushing constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//Subbing
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//Calling function Main.fibonacci
@RETURNID_2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@ARG
M=D
M=M-1
M=M-1
M=M-1
M=M-1
M=M-1
M=M-1
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURNID_2)
//Pushing from ARG 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
//Pushing constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//Subbing
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//Calling function Main.fibonacci
@RETURNID_3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@ARG
M=D
M=M-1
M=M-1
M=M-1
M=M-1
M=M-1
M=M-1
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURNID_3)
//Adding
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
//Returning from function
//Saving return value
@LCL
D=M
@R15
M=D
@5
D=A
@R15
A=M-D
D=M
@R15
M=D
//Pushing return value to ARG
@SP
A=M-1
D=M
@ARG
A=M
M=D
//Resetting stackpointer
D=A+1
@SP
M=D
//Resetting memory after return
//Resetting THAT
@LCL
M=M-1
A=M
D=M
@THAT
M=D
//Resetting THIS
@LCL
M=M-1
A=M
D=M
@THIS
M=D
//Resetting ARG
@LCL
M=M-1
A=M
D=M
@ARG
M=D
//Resetting local
@LCL
M=M-1
A=M
D=M
@LCL
M=D
//Jumping to saved return location
@R15
A=M
0;JMP
